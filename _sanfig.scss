// Copyright (C) 2016 Colin Fulton
// All rights reserved.
//
// This software may be modified and distributed under the
// terms of the three-clause BSD license. See LICENSE.txt
// (located in root directory of this project) for details.

// Dynamically create CSS rules from a map.
@mixin sanfig_map_to_css($rules) {
  @each $attribute, $value in $rules {
    #{$attribute}: $value;
  }
}

// Perform a deep lookup on a map, returning null if nothing is found.
@function sanfig_deep_map_get($map, $keys...) {
  $output: $map;

  @each $key in $keys {
    $output: if(
               (type_of($output) == map),
               map_get($output, $key),
               null
             );
  }

  @return $output;
}

// Lookup a value in a configuration map, returning a default value when a real
// value isn't found, or null if nothing is found.
@function sanfig_get_config($config_map, $keys...) {
  $possibles: _sanfig_lookup_chain($config_map, $keys...);
  $output:    null;

  @each $possible in $possibles {
    @if $output == null {
      @if type_of($possible) == map {
        $output: map_get($possible, DEFAULT);
      } @else if type_of($possible) != null {
        $output: $possible;
      }
    }
  }

    ////////////////////////////
   // TODO: DEAL WITH DELAYS //
  ////////////////////////////
  @return $output;
}

@function SAME_AS($keys...) {
  @return join(SANFIG_DELAYED, $keys);
}

@mixin sanfig_config_to_css($config_map, $variants: (), $type: null, $sub_type: null) {
  $defaults:   _sanfig_config_to_rules($config_map, $type)

  @include sanfig_map_to_rules($defaults);

  @each $variant, $selector in $variants {
    $rules: _sanfig_config_to_rules($config_map, $type, $variant, $defaults)

    @if length($rules) > 1 {
      #{$selector} { @include sanfig_map_to_rules($rules); }
    }
  }
}



// Internal Functions
//   - only for use by library functions
//   - not guaranteed to be stable thus not for use outside of the library

// Returns a list containing the result of performing a deep map lookup with the
// keys, the keys sans the last key, the keys sans the last two keys, etc.
@function _sanfig_lookup_chain($map, $keys...) {
  $paths: append((), $keys);

  @while length(nth($paths, -1)) > 1 {
    $paths: append($paths, _sanfig_pop(nth($paths, -1)));
  }

  $chain: ();
  @each $path in $paths {
    $chain: append(
              $chain,
              sanfig_deep_map_get($map, $path...)
            );
  }

  @return append($chain, $map);
}

// Returns a copy of the given list with the last item removed.
@function _sanfig_pop($list) {
  @if length($list) > 1 {
    $output: ();

    @for $index from 1 through length($list) - 1 {
      $output: append($output, nth($list, $index))
    }

    @return $output
  } @else {
    @return ();
  }
}

@function _sanfig_config_to_rules($config_map, $type, $variant: false, $defaults: ()) {
  $attributes: map_keys(if($type, map_get($config_map, $type), $config_map));
  $rules:      ();

  @each $attribute in $attributes {
    $path:  if($type, ($type $attribute), $attribute);
    $path:  if($variant, append($path, $variant), $path);
    $value: sanfig_get_config($config_map, $path...);

    @if $value != map_get($defaults, $attribute) {
      $rules: map_merge($rules, ( $attribute: $value ));
    }
  }

  @return $rules;
}
